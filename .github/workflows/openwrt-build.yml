#
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: openwrt 编译

on:
  repository_dispatch:
    types: [openwrt-build]
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"
  # push:
  #   branches:
  #     - master
  # schedule:
  #   - cron: 0 0 */3 * *

permissions:
  contents: read

env:
  SSH_ACTIONS: false
  TZ: Asia/Shanghai
  REPO_URL: https://github.com/coolsnowwolf/lede 
  REPO_BRANCH: master

jobs:
  build_openwrt:
    name: Build OpenWrt Firmware

    runs-on: ubuntu-latest

    steps:
      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet*  snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install file python3-distutils libncurses-dev g++ clang libfuse-dev ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "$TZ"

      - name: Checkout OpenWrt
        uses: actions/checkout@v4

      - name: Clone source code
        run: |
          git clone --depth 1 https://github.com/coolsnowwolf/lede openwrt

      - name: Update feeds
        run: |
          openwrt/scripts/feeds update -a -f
          openwrt/scripts/feeds install -a -f

      - name: Generate configuration file
        run: |
          mv config/x86.config openwrt/.config

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

      - name: change settings
        run: |
          sed -i 's/^[ \t]*//g' openwrt/.config
          sudo bash ./script/setting.sh

      - name: Download packages
        run: |
          cd openwrt && make defconfig && make download -j16

      - name: Compile firmware
        run: |
          cd openwrt
          make -j $(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          cd openwrt
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          mkdir -p ./artifact/sdk
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*sdk*.tar.xz") ./artifact/sdk/
          rm -rf $(find ./bin/targets/ -type f -name "*sdk*.tar.xz")
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Get Commit Hash
        id: getHash
        run: |
          cd openwrt
          echo "commitHash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Compare Commit Hash
        id: cacheHash
        uses: actions/cache@v4
        with:
          path: openwrt/artifact/sdk
          key: sdk_Hash_${{ steps.getHash.outputs.commitHash }}

      - name: Upload buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_buildinfo
          path: openwrt/artifact/buildinfo/

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_package
          path: openwrt/artifact/package/

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware
          path: openwrt/bin/targets/

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_sdk
          path: openwrt/artifact/sdk/

      - name: Trigger build
        if: steps.cacheHash.outputs.cache-hit != 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ github.token }}
          event-type: plugin-build
          client-payload: '{"hash": "${{ steps.getHash.outputs.commitHash }}"}'
